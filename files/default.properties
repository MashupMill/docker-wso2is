###############
# Server config
###############

Server_HostName=${CONTAINER_IP}
Server_MgtHostName=${CONTAINER_IP}
Server_EnableEmailUserName=true

Server_DeploymentSynchronizer_Enabled=false
Server_DeploymentSynchronizer_AutoCommit=false
Server_DeploymentSynchronizer_AutoCheckout=true
Server_DeploymentSynchronizer_RepositoryType=svn
Server_DeploymentSynchronizer_SvnUrl=http://svnrepo.example.com/repos/
Server_DeploymentSynchronizer_SvnUser=username
Server_DeploymentSynchronizer_SvnPassword=password
Server_DeploymentSynchronizer_SvnUrlAppendTenantId=true

Server_JDBCPersistenceManager_SkipDBSchemaCreation=false

HIDE_ADMIN_SERVICE_WSDLS=true

CLUSTERING_ENABLED=false
CLUSTER_DOMAIN=wso2.is.domain
CLUSTERING_MEMBERSHIP_SCHEME=multicast
LOCAL_MEMBER_HOST=${CONTAINER_IP}
LOCAL_MEMBER_PORT=4000
WELL_KNOWN_MEMBERS=
HTTPS_HOSTNAME_VERIFIER=DefaultAndLocalhost


#####################
# KeyStore/TrustStore
#####################

KeyStore_Primary_Location=repository/resources/security/wso2carbon.jks
KeyStore_Primary_Type=JKS
KeyStore_Primary_Password=wso2carbon
KeyStore_Primary_KeyAlias=wso2carbon
KeyStore_Primary_KeyPassword=wso2carbon

KeyStore_Registry_Location=${KeyStore_Primary_Location}
KeyStore_Registry_Type=${KeyStore_Primary_Type}
KeyStore_Registry_Password=${KeyStore_Primary_Password}
KeyStore_Registry_KeyAlias=${KeyStore_Primary_KeyAlias}
KeyStore_Registry_KeyPassword=${KeyStore_Primary_KeyPassword}

KeyStore_UserRP_Location=repository/resources/security/userRP.jks
KeyStore_UserRP_Type=${KeyStore_Primary_Type}
KeyStore_UserRP_Password=${KeyStore_Primary_Password}
KeyStore_UserRP_KeyAlias=${KeyStore_Primary_KeyAlias}
KeyStore_UserRP_KeyPassword=${KeyStore_Primary_KeyPassword}

TrustStore_Location=repository/resources/security/client-truststore.jks
TrustStore_Type=JKS
TrustStore_Password=wso2carbon
TrustStore_Alias=wso2carbon


##############
# Data sources
##############

DS_WSO2CARBONDB_url=jdbc:h2:repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE
DS_WSO2CARBONDB_username=wso2carbon
DS_WSO2CARBONDB_password=wso2carbon
DS_WSO2CARBONDB_driverClassName=org.h2.Driver
DS_WSO2CARBONDB_maxActive=500
DS_WSO2CARBONDB_maxWait=60000
DS_WSO2CARBONDB_minIdle=5
DS_WSO2CARBONDB_testOnBorrow=true
DS_WSO2CARBONDB_validationQuery=SELECT 1
DS_WSO2CARBONDB_validationInterval=30000
DS_WSO2CARBONDB_defaultAutoCommit=false

DS_WSO2AMDB_url=${DS_WSO2CARBONDB_url}
DS_WSO2AMDB_username=${DS_WSO2CARBONDB_username}
DS_WSO2AMDB_password=${DS_WSO2CARBONDB_password}
DS_WSO2AMDB_driverClassName=${DS_WSO2CARBONDB_driverClassName}
DS_WSO2AMDB_maxActive=${DS_WSO2CARBONDB_maxActive}
DS_WSO2AMDB_maxWait=${DS_WSO2CARBONDB_maxWait}
DS_WSO2AMDB_minIdle=${DS_WSO2CARBONDB_minIdle}
DS_WSO2AMDB_testOnBorrow=${DS_WSO2CARBONDB_testOnBorrow}
DS_WSO2AMDB_validationQuery=${DS_WSO2CARBONDB_validationQuery}
DS_WSO2AMDB_validationInterval=${DS_WSO2CARBONDB_validationInterval}
DS_WSO2AMDB_defaultAutoCommit=${DS_WSO2CARBONDB_defaultAutoCommit}

DS_WSO2REGDB_url=${DS_WSO2CARBONDB_url}
DS_WSO2REGDB_username=${DS_WSO2CARBONDB_username}
DS_WSO2REGDB_password=${DS_WSO2CARBONDB_password}
DS_WSO2REGDB_driverClassName=${DS_WSO2CARBONDB_driverClassName}
DS_WSO2REGDB_maxActive=${DS_WSO2CARBONDB_maxActive}
DS_WSO2REGDB_maxWait=${DS_WSO2CARBONDB_maxWait}
DS_WSO2REGDB_minIdle=${DS_WSO2CARBONDB_minIdle}
DS_WSO2REGDB_testOnBorrow=${DS_WSO2CARBONDB_testOnBorrow}
DS_WSO2REGDB_validationQuery=${DS_WSO2CARBONDB_validationQuery}
DS_WSO2REGDB_validationInterval=${DS_WSO2CARBONDB_validationInterval}
DS_WSO2REGDB_defaultAutoCommit=${DS_WSO2CARBONDB_defaultAutoCommit}

DS_WSO2UMDB_url=${DS_WSO2CARBONDB_url}
DS_WSO2UMDB_username=${DS_WSO2CARBONDB_username}
DS_WSO2UMDB_password=${DS_WSO2CARBONDB_password}
DS_WSO2UMDB_driverClassName=${DS_WSO2CARBONDB_driverClassName}
DS_WSO2UMDB_maxActive=${DS_WSO2CARBONDB_maxActive}
DS_WSO2UMDB_maxWait=${DS_WSO2CARBONDB_maxWait}
DS_WSO2UMDB_minIdle=${DS_WSO2CARBONDB_minIdle}
DS_WSO2UMDB_testOnBorrow=${DS_WSO2CARBONDB_testOnBorrow}
DS_WSO2UMDB_validationQuery=${DS_WSO2CARBONDB_validationQuery}
DS_WSO2UMDB_validationInterval=${DS_WSO2CARBONDB_validationInterval}
DS_WSO2UMDB_defaultAutoCommit=${DS_WSO2CARBONDB_defaultAutoCommit}


##############
# User Manager
##############

UserManager_Real_Configuration_AddAdmin=true
UserManager_Real_Configuration_AdminRole=admin
UserManager_Real_Configuration_EveryOneRoleName=everyone
UserManager_Real_Configuration_AdminUser_UserName=admin@wso2.com
UserManager_Real_Configuration_AdminUser_Password=admin


#############
# API Manager
#############

APIManager_GatewayType=None


##############
# Auth Manager
##############

# Server URL of the Authentication service
APIManager_AuthManager_ServerURL=https://localhost:9443/services/


#############
# API Gateway
#############

# Server URL of the API gateway
APIManager_APIGateway_Environment_hybrid_ServerURL=https://localhost:9443/services/

# Endpoint URLs for the APIs hosted in this API gateway
APIManager_APIGateway_Environment_hybrid_GatewayEndpoint=http://localhost:8280,https://localhost:8243

# Enable/Disable token caching at gateway node
APIManager_APIGateway_EnableGatewayKeyCache=true

# Enable/Disable API resource caching at gateway node
APIManager_APIGateway_EnableGatewayResourceCache=true


###################
# API Key Validator
###################

# Server URL of the API key manager
APIManager_APIKeyValidator_ServerURL=https://localhost:9443/services/

# Enable/Disable JWT caching
APIManager_APIKeyValidator_EnableJWTCache=false

# Enable/Disable API key validation information caching at key-management server
APIManager_APIKeyValidator_EnableKeyMgtValidationInfoCache=false

# Configurations related to enable thrift support for key-management related communication.
#   If you want to switch back to Web Service Client, change the value of "KeyValidatorClientType" to "WSClient".
#   In a distributed environment;
#       -If you are at the Gateway node, you need to point "ThriftClientPort" value to the "ThriftServerPort" value given at KeyManager node.
#       -If you need to start two API Manager instances in the same machine, you need to give different ports to "ThriftServerPort" value in two nodes.
#       -ThriftServerHost - Allows to configure a hostname for the thrift server. It uses the carbon hostname by default.
#       -Gateway use this parameter to connect key validation thrift service.
APIManager_APIKeyValidator_KeyValidatorClientType=ThriftClient
APIManager_APIKeyValidator_ThriftClientPort=10397
APIManager_APIKeyValidator_ThriftClientConnectionTimeOut=10000
APIManager_APIKeyValidator_ThriftServerPort=10397
APIManager_APIKeyValidator_ThriftServerHost=localhost
APIManager_APIKeyValidator_EnableThriftServer=false

# Scope used for marking Application Tokens. If a token is generated with this scope, they will be treated as Application Access Tokens
APIManager_APIKeyValidator_ApplicationTokenScope=am_application_scope

# Specifies the implementation to be used for KeyValidationHandler. Steps for validating a token can be controlled by plugging in a custom KeyValidation Handler
APIManager_APIKeyValidator_KeyValidationHandlerClassName=org.wso2.carbon.apimgt.keymgt.handlers.DefaultKeyValidationHandler

# Remove UserName from JWT Token
APIManager_APIKeyValidator_RemoveUserNameFromJWTForApplicationToken=false

# Name of the token API
APIManager_APIKeyValidator_TokenEndPointName=/oauth2/token

# This the API URL for revoke API. When we revoke tokens revoke requests should go through this API deployed in API
# gateway. Then it will do cache invalidations related to revoked tokens. In distributed deployment we should configure
# this property in key manager node by pointing gateway https( /http, we recommend users to use 'https' endpoints for
# security purpose) url. Also please note that we should point gateway revoke service to key manager
APIManager_APIKeyValidator_RevokeAPIURL=https://localhost:8243/revoke

# Whether to encrypt tokens when storing in the Database Note: If changing this value to true, change the value of
# <TokenPersistenceProcessor> to org.wso2.carbon.identity.oauth.tokenprocessor.EncryptionDecryptionPersistenceProcessor
# in the identity.xml
APIManager_APIKeyValidator_EncryptPersistedTokens=false


#################
# Tier Management
#################

# Enable the providers to expose their APIs over the special 'Unlimited' tier which basically disables tier based
# throttling for the specified APIs.
APIManager_APIKeyValidator_TierManagement_EnableUnlimitedTier=true


############
# JWT Claims
############

# Name of the security context header to be added to the validated requests.
APIManager_APIConsumerAuthentication_SecurityContextHeader=X-JWT-Assertion

# Fully qualified name of the class that will retrieve additional user claims to be appended to the JWT. If not
# specified no claims will be appended.If user wants to add all user claims in the jwt token, he needs to enable this
# parameter. The DefaultClaimsRetriever class adds user claims from the default carbon user store.
APIManager_APIConsumerAuthentication_ClaimsRetrieverImplClass=org.wso2.carbon.apimgt.impl.token.DefaultClaimsRetriever

# The dialectURI under which the claimURIs that need to be appended to the JWT are defined. Not used with custom
# ClaimsRetriever implementations. The same value is used in the keys for appending the default properties to the JWT.
APIManager_APIConsumerAuthentication_ConsumerDialectURI=http://wso2.org/claims

# Signature algorithm. Accepts "SHA256withRSA" or "NONE". To disable signing explicitly specify "NONE".
APIManager_APIConsumerAuthentication_SignatureAlgorithm=NONE

# Enable/Disable JWT generation. Default is false.
APIManager_APIConsumerAuthentication_EnableTokenGeneration=false

# This parameter specifies which implementation should be used for generating the Token.
APIManager_APIConsumerAuthentication_TokenGeneratorImpl=org.wso2.carbon.apimgt.impl.token.JWTGenerator
